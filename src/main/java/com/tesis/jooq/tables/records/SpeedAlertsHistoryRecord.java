/*
 * This file is generated by jOOQ.
 */
package com.tesis.jooq.tables.records;


import com.tesis.jooq.tables.SpeedAlertsHistory;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SpeedAlertsHistoryRecord extends UpdatableRecordImpl<SpeedAlertsHistoryRecord> implements Record3<LocalDateTime, Long, Float> {

    private static final long serialVersionUID = -1680034693;

    /**
     * Setter for <code>public.speed_alerts_history.time</code>.
     */
    public void setTime(LocalDateTime value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.speed_alerts_history.time</code>.
     */
    public LocalDateTime getTime() {
        return (LocalDateTime) get(0);
    }

    /**
     * Setter for <code>public.speed_alerts_history.alert_id</code>.
     */
    public void setAlertId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.speed_alerts_history.alert_id</code>.
     */
    public Long getAlertId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.speed_alerts_history.speed</code>.
     */
    public void setSpeed(Float value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.speed_alerts_history.speed</code>.
     */
    public Float getSpeed() {
        return (Float) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<LocalDateTime> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<LocalDateTime, Long, Float> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<LocalDateTime, Long, Float> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<LocalDateTime> field1() {
        return SpeedAlertsHistory.SPEED_ALERTS_HISTORY.TIME;
    }

    @Override
    public Field<Long> field2() {
        return SpeedAlertsHistory.SPEED_ALERTS_HISTORY.ALERT_ID;
    }

    @Override
    public Field<Float> field3() {
        return SpeedAlertsHistory.SPEED_ALERTS_HISTORY.SPEED;
    }

    @Override
    public LocalDateTime component1() {
        return getTime();
    }

    @Override
    public Long component2() {
        return getAlertId();
    }

    @Override
    public Float component3() {
        return getSpeed();
    }

    @Override
    public LocalDateTime value1() {
        return getTime();
    }

    @Override
    public Long value2() {
        return getAlertId();
    }

    @Override
    public Float value3() {
        return getSpeed();
    }

    @Override
    public SpeedAlertsHistoryRecord value1(LocalDateTime value) {
        setTime(value);
        return this;
    }

    @Override
    public SpeedAlertsHistoryRecord value2(Long value) {
        setAlertId(value);
        return this;
    }

    @Override
    public SpeedAlertsHistoryRecord value3(Float value) {
        setSpeed(value);
        return this;
    }

    @Override
    public SpeedAlertsHistoryRecord values(LocalDateTime value1, Long value2, Float value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SpeedAlertsHistoryRecord
     */
    public SpeedAlertsHistoryRecord() {
        super(SpeedAlertsHistory.SPEED_ALERTS_HISTORY);
    }

    /**
     * Create a detached, initialised SpeedAlertsHistoryRecord
     */
    public SpeedAlertsHistoryRecord(LocalDateTime time, Long alertId, Float speed) {
        super(SpeedAlertsHistory.SPEED_ALERTS_HISTORY);

        set(0, time);
        set(1, alertId);
        set(2, speed);
    }
}

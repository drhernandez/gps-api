/*
 * This file is generated by jOOQ.
 */
package com.tesis.jooq.tables;


import com.tesis.jooq.Keys;
import com.tesis.jooq.Public;
import com.tesis.jooq.tables.records.TrackingsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Trackings extends TableImpl<TrackingsRecord> {

    private static final long serialVersionUID = -1526661699;

    /**
     * The reference instance of <code>public.trackings</code>
     */
    public static final Trackings TRACKINGS = new Trackings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrackingsRecord> getRecordType() {
        return TrackingsRecord.class;
    }

    /**
     * The column <code>public.trackings.id</code>.
     */
    public final TableField<TrackingsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('trackings_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.trackings.device_id</code>.
     */
    public final TableField<TrackingsRecord, Long> DEVICE_ID = createField(DSL.name("device_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.trackings.lat</code>.
     */
    public final TableField<TrackingsRecord, Float> LAT = createField(DSL.name("lat"), org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>public.trackings.lng</code>.
     */
    public final TableField<TrackingsRecord, Float> LNG = createField(DSL.name("lng"), org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>public.trackings.speed</code>.
     */
    public final TableField<TrackingsRecord, Float> SPEED = createField(DSL.name("speed"), org.jooq.impl.SQLDataType.REAL, this, "");

    /**
     * The column <code>public.trackings.sat</code>.
     */
    public final TableField<TrackingsRecord, Integer> SAT = createField(DSL.name("sat"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.trackings.hdop</code>.
     */
    public final TableField<TrackingsRecord, Integer> HDOP = createField(DSL.name("hdop"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.trackings.time</code>.
     */
    public final TableField<TrackingsRecord, LocalDateTime> TIME = createField(DSL.name("time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>public.trackings</code> table reference
     */
    public Trackings() {
        this(DSL.name("trackings"), null);
    }

    /**
     * Create an aliased <code>public.trackings</code> table reference
     */
    public Trackings(String alias) {
        this(DSL.name(alias), TRACKINGS);
    }

    /**
     * Create an aliased <code>public.trackings</code> table reference
     */
    public Trackings(Name alias) {
        this(alias, TRACKINGS);
    }

    private Trackings(Name alias, Table<TrackingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Trackings(Name alias, Table<TrackingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Trackings(Table<O> child, ForeignKey<O, TrackingsRecord> key) {
        super(child, key, TRACKINGS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<TrackingsRecord, Long> getIdentity() {
        return Keys.IDENTITY_TRACKINGS;
    }

    @Override
    public UniqueKey<TrackingsRecord> getPrimaryKey() {
        return Keys.TRACKINGS_PKEY;
    }

    @Override
    public List<UniqueKey<TrackingsRecord>> getKeys() {
        return Arrays.<UniqueKey<TrackingsRecord>>asList(Keys.TRACKINGS_PKEY);
    }

    @Override
    public List<ForeignKey<TrackingsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TrackingsRecord, ?>>asList(Keys.TRACKINGS__TRACKINGS_DEVICE_ID_FKEY);
    }

    public Devices devices() {
        return new Devices(this, Keys.TRACKINGS__TRACKINGS_DEVICE_ID_FKEY);
    }

    @Override
    public Trackings as(String alias) {
        return new Trackings(DSL.name(alias), this);
    }

    @Override
    public Trackings as(Name alias) {
        return new Trackings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Trackings rename(String name) {
        return new Trackings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trackings rename(Name name) {
        return new Trackings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Float, Float, Float, Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}

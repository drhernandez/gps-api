/*
 * This file is generated by jOOQ.
 */
package com.tesis.jooq.tables.daos;


import com.tesis.jooq.tables.SpeedAlerts;
import com.tesis.jooq.tables.records.SpeedAlertsRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SpeedAlertsDao extends DAOImpl<SpeedAlertsRecord, com.tesis.jooq.tables.pojos.SpeedAlerts, Long> {

    /**
     * Create a new SpeedAlertsDao without any configuration
     */
    public SpeedAlertsDao() {
        super(SpeedAlerts.SPEED_ALERTS, com.tesis.jooq.tables.pojos.SpeedAlerts.class);
    }

    /**
     * Create a new SpeedAlertsDao with an attached configuration
     */
    public SpeedAlertsDao(Configuration configuration) {
        super(SpeedAlerts.SPEED_ALERTS, com.tesis.jooq.tables.pojos.SpeedAlerts.class, configuration);
    }

    @Override
    public Long getId(com.tesis.jooq.tables.pojos.SpeedAlerts object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.tesis.jooq.tables.pojos.SpeedAlerts> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(SpeedAlerts.SPEED_ALERTS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.tesis.jooq.tables.pojos.SpeedAlerts> fetchById(Long... values) {
        return fetch(SpeedAlerts.SPEED_ALERTS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.tesis.jooq.tables.pojos.SpeedAlerts fetchOneById(Long value) {
        return fetchOne(SpeedAlerts.SPEED_ALERTS.ID, value);
    }

    /**
     * Fetch records that have <code>active BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.tesis.jooq.tables.pojos.SpeedAlerts> fetchRangeOfActive(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(SpeedAlerts.SPEED_ALERTS.ACTIVE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>active IN (values)</code>
     */
    public List<com.tesis.jooq.tables.pojos.SpeedAlerts> fetchByActive(Boolean... values) {
        return fetch(SpeedAlerts.SPEED_ALERTS.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>speed BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.tesis.jooq.tables.pojos.SpeedAlerts> fetchRangeOfSpeed(Float lowerInclusive, Float upperInclusive) {
        return fetchRange(SpeedAlerts.SPEED_ALERTS.SPEED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>speed IN (values)</code>
     */
    public List<com.tesis.jooq.tables.pojos.SpeedAlerts> fetchBySpeed(Float... values) {
        return fetch(SpeedAlerts.SPEED_ALERTS.SPEED, values);
    }

    /**
     * Fetch records that have <code>device_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.tesis.jooq.tables.pojos.SpeedAlerts> fetchRangeOfDeviceId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(SpeedAlerts.SPEED_ALERTS.DEVICE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>device_id IN (values)</code>
     */
    public List<com.tesis.jooq.tables.pojos.SpeedAlerts> fetchByDeviceId(Long... values) {
        return fetch(SpeedAlerts.SPEED_ALERTS.DEVICE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>device_id = value</code>
     */
    public com.tesis.jooq.tables.pojos.SpeedAlerts fetchOneByDeviceId(Long value) {
        return fetchOne(SpeedAlerts.SPEED_ALERTS.DEVICE_ID, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.tesis.jooq.tables.pojos.SpeedAlerts> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(SpeedAlerts.SPEED_ALERTS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.tesis.jooq.tables.pojos.SpeedAlerts> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(SpeedAlerts.SPEED_ALERTS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.tesis.jooq.tables.pojos.SpeedAlerts> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(SpeedAlerts.SPEED_ALERTS.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.tesis.jooq.tables.pojos.SpeedAlerts> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(SpeedAlerts.SPEED_ALERTS.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>activated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.tesis.jooq.tables.pojos.SpeedAlerts> fetchRangeOfActivatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(SpeedAlerts.SPEED_ALERTS.ACTIVATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>activated_at IN (values)</code>
     */
    public List<com.tesis.jooq.tables.pojos.SpeedAlerts> fetchByActivatedAt(LocalDateTime... values) {
        return fetch(SpeedAlerts.SPEED_ALERTS.ACTIVATED_AT, values);
    }

    /**
     * Fetch records that have <code>last_fired BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.tesis.jooq.tables.pojos.SpeedAlerts> fetchRangeOfLastFired(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(SpeedAlerts.SPEED_ALERTS.LAST_FIRED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_fired IN (values)</code>
     */
    public List<com.tesis.jooq.tables.pojos.SpeedAlerts> fetchByLastFired(LocalDateTime... values) {
        return fetch(SpeedAlerts.SPEED_ALERTS.LAST_FIRED, values);
    }
}

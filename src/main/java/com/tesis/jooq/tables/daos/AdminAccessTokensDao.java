/*
 * This file is generated by jOOQ.
 */
package com.tesis.jooq.tables.daos;


import com.tesis.jooq.tables.AdminAccessTokens;
import com.tesis.jooq.tables.records.AdminAccessTokensRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminAccessTokensDao extends DAOImpl<AdminAccessTokensRecord, com.tesis.jooq.tables.pojos.AdminAccessTokens, Long> {

    /**
     * Create a new AdminAccessTokensDao without any configuration
     */
    public AdminAccessTokensDao() {
        super(AdminAccessTokens.ADMIN_ACCESS_TOKENS, com.tesis.jooq.tables.pojos.AdminAccessTokens.class);
    }

    /**
     * Create a new AdminAccessTokensDao with an attached configuration
     */
    public AdminAccessTokensDao(Configuration configuration) {
        super(AdminAccessTokens.ADMIN_ACCESS_TOKENS, com.tesis.jooq.tables.pojos.AdminAccessTokens.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(com.tesis.jooq.tables.pojos.AdminAccessTokens object) {
        return object.getUserId();
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.tesis.jooq.tables.pojos.AdminAccessTokens> fetchByUserId(Long... values) {
        return fetch(AdminAccessTokens.ADMIN_ACCESS_TOKENS.USER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>user_id = value</code>
     */
    public com.tesis.jooq.tables.pojos.AdminAccessTokens fetchOneByUserId(Long value) {
        return fetchOne(AdminAccessTokens.ADMIN_ACCESS_TOKENS.USER_ID, value);
    }

    /**
     * Fetch records that have <code>token IN (values)</code>
     */
    public List<com.tesis.jooq.tables.pojos.AdminAccessTokens> fetchByToken(String... values) {
        return fetch(AdminAccessTokens.ADMIN_ACCESS_TOKENS.TOKEN, values);
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.tesis.jooq.tables;


import com.tesis.jooq.Indexes;
import com.tesis.jooq.Keys;
import com.tesis.jooq.Public;
import com.tesis.jooq.tables.records.AdminAccessTokensRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminAccessTokens extends TableImpl<AdminAccessTokensRecord> {

    private static final long serialVersionUID = 1766949473;

    /**
     * The reference instance of <code>public.admin_access_tokens</code>
     */
    public static final AdminAccessTokens ADMIN_ACCESS_TOKENS = new AdminAccessTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminAccessTokensRecord> getRecordType() {
        return AdminAccessTokensRecord.class;
    }

    /**
     * The column <code>public.admin_access_tokens.user_id</code>.
     */
    public final TableField<AdminAccessTokensRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.admin_access_tokens.token</code>.
     */
    public final TableField<AdminAccessTokensRecord, String> TOKEN = createField("token", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.admin_access_tokens</code> table reference
     */
    public AdminAccessTokens() {
        this(DSL.name("admin_access_tokens"), null);
    }

    /**
     * Create an aliased <code>public.admin_access_tokens</code> table reference
     */
    public AdminAccessTokens(String alias) {
        this(DSL.name(alias), ADMIN_ACCESS_TOKENS);
    }

    /**
     * Create an aliased <code>public.admin_access_tokens</code> table reference
     */
    public AdminAccessTokens(Name alias) {
        this(alias, ADMIN_ACCESS_TOKENS);
    }

    private AdminAccessTokens(Name alias, Table<AdminAccessTokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdminAccessTokens(Name alias, Table<AdminAccessTokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AdminAccessTokens(Table<O> child, ForeignKey<O, AdminAccessTokensRecord> key) {
        super(child, key, ADMIN_ACCESS_TOKENS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ADMIN_ACCESS_TOKENS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AdminAccessTokensRecord> getPrimaryKey() {
        return Keys.ADMIN_ACCESS_TOKENS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AdminAccessTokensRecord>> getKeys() {
        return Arrays.<UniqueKey<AdminAccessTokensRecord>>asList(Keys.ADMIN_ACCESS_TOKENS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AdminAccessTokensRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AdminAccessTokensRecord, ?>>asList(Keys.ADMIN_ACCESS_TOKENS__ADMIN_ACCESS_TOKENS_USER_ID_FKEY);
    }

    public AdminUsers adminUsers() {
        return new AdminUsers(this, Keys.ADMIN_ACCESS_TOKENS__ADMIN_ACCESS_TOKENS_USER_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AdminAccessTokens as(String alias) {
        return new AdminAccessTokens(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AdminAccessTokens as(Name alias) {
        return new AdminAccessTokens(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminAccessTokens rename(String name) {
        return new AdminAccessTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminAccessTokens rename(Name name) {
        return new AdminAccessTokens(name, null);
    }
}

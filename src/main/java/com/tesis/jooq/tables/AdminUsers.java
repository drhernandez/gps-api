/*
 * This file is generated by jOOQ.
 */
package com.tesis.jooq.tables;


import com.tesis.jooq.Indexes;
import com.tesis.jooq.Keys;
import com.tesis.jooq.Public;
import com.tesis.jooq.tables.records.AdminUsersRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminUsers extends TableImpl<AdminUsersRecord> {

    private static final long serialVersionUID = 1941800199;

    /**
     * The reference instance of <code>public.admin_users</code>
     */
    public static final AdminUsers ADMIN_USERS = new AdminUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminUsersRecord> getRecordType() {
        return AdminUsersRecord.class;
    }

    /**
     * The column <code>public.admin_users.id</code>.
     */
    public final TableField<AdminUsersRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('admin_users_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.admin_users.status</code>.
     */
    public final TableField<AdminUsersRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.admin_users.deleted_at</code>.
     */
    public final TableField<AdminUsersRecord, Timestamp> DELETED_AT = createField("deleted_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.admin_users.last_updated</code>.
     */
    public final TableField<AdminUsersRecord, Timestamp> LAST_UPDATED = createField("last_updated", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.admin_users.email</code>.
     */
    public final TableField<AdminUsersRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.admin_users.password</code>.
     */
    public final TableField<AdminUsersRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.admin_users.name</code>.
     */
    public final TableField<AdminUsersRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.admin_users.last_name</code>.
     */
    public final TableField<AdminUsersRecord, String> LAST_NAME = createField("last_name", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.admin_users.dni</code>.
     */
    public final TableField<AdminUsersRecord, String> DNI = createField("dni", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.admin_users.address</code>.
     */
    public final TableField<AdminUsersRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.admin_users.phone</code>.
     */
    public final TableField<AdminUsersRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.admin_users</code> table reference
     */
    public AdminUsers() {
        this(DSL.name("admin_users"), null);
    }

    /**
     * Create an aliased <code>public.admin_users</code> table reference
     */
    public AdminUsers(String alias) {
        this(DSL.name(alias), ADMIN_USERS);
    }

    /**
     * Create an aliased <code>public.admin_users</code> table reference
     */
    public AdminUsers(Name alias) {
        this(alias, ADMIN_USERS);
    }

    private AdminUsers(Name alias, Table<AdminUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdminUsers(Name alias, Table<AdminUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AdminUsers(Table<O> child, ForeignKey<O, AdminUsersRecord> key) {
        super(child, key, ADMIN_USERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ADMIN_USERS_EMAIL_KEY, Indexes.ADMIN_USERS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AdminUsersRecord, Long> getIdentity() {
        return Keys.IDENTITY_ADMIN_USERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AdminUsersRecord> getPrimaryKey() {
        return Keys.ADMIN_USERS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AdminUsersRecord>> getKeys() {
        return Arrays.<UniqueKey<AdminUsersRecord>>asList(Keys.ADMIN_USERS_PKEY, Keys.ADMIN_USERS_EMAIL_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AdminUsers as(String alias) {
        return new AdminUsers(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AdminUsers as(Name alias) {
        return new AdminUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminUsers rename(String name) {
        return new AdminUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminUsers rename(Name name) {
        return new AdminUsers(name, null);
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.tesis.jooq.tables;


import com.tesis.jooq.Indexes;
import com.tesis.jooq.Keys;
import com.tesis.jooq.Public;
import com.tesis.jooq.tables.records.VehiclesRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Vehicles extends TableImpl<VehiclesRecord> {

    private static final long serialVersionUID = -2054767622;

    /**
     * The reference instance of <code>public.vehicles</code>
     */
    public static final Vehicles VEHICLES = new Vehicles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VehiclesRecord> getRecordType() {
        return VehiclesRecord.class;
    }

    /**
     * The column <code>public.vehicles.id</code>.
     */
    public final TableField<VehiclesRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('vehicles_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.vehicles.status</code>.
     */
    public final TableField<VehiclesRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.vehicles.deleted_at</code>.
     */
    public final TableField<VehiclesRecord, Timestamp> DELETED_AT = createField("deleted_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.vehicles.last_updated</code>.
     */
    public final TableField<VehiclesRecord, Timestamp> LAST_UPDATED = createField("last_updated", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.vehicles.user_id</code>.
     */
    public final TableField<VehiclesRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.vehicles.device_id</code>.
     */
    public final TableField<VehiclesRecord, Long> DEVICE_ID = createField("device_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.vehicles.plate</code>.
     */
    public final TableField<VehiclesRecord, String> PLATE = createField("plate", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.vehicles.brand</code>.
     */
    public final TableField<VehiclesRecord, String> BRAND = createField("brand", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.vehicles.brand_line</code>.
     */
    public final TableField<VehiclesRecord, String> BRAND_LINE = createField("brand_line", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.vehicles</code> table reference
     */
    public Vehicles() {
        this(DSL.name("vehicles"), null);
    }

    /**
     * Create an aliased <code>public.vehicles</code> table reference
     */
    public Vehicles(String alias) {
        this(DSL.name(alias), VEHICLES);
    }

    /**
     * Create an aliased <code>public.vehicles</code> table reference
     */
    public Vehicles(Name alias) {
        this(alias, VEHICLES);
    }

    private Vehicles(Name alias, Table<VehiclesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Vehicles(Name alias, Table<VehiclesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Vehicles(Table<O> child, ForeignKey<O, VehiclesRecord> key) {
        super(child, key, VEHICLES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VEHICLES_DEVICE_ID_KEY, Indexes.VEHICLES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<VehiclesRecord, Long> getIdentity() {
        return Keys.IDENTITY_VEHICLES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<VehiclesRecord> getPrimaryKey() {
        return Keys.VEHICLES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<VehiclesRecord>> getKeys() {
        return Arrays.<UniqueKey<VehiclesRecord>>asList(Keys.VEHICLES_PKEY, Keys.VEHICLES_DEVICE_ID_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<VehiclesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VehiclesRecord, ?>>asList(Keys.VEHICLES__VEHICLES_DEVICE_ID_FKEY);
    }

    public Devices devices() {
        return new Devices(this, Keys.VEHICLES__VEHICLES_DEVICE_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Vehicles as(String alias) {
        return new Vehicles(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Vehicles as(Name alias) {
        return new Vehicles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehicles rename(String name) {
        return new Vehicles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehicles rename(Name name) {
        return new Vehicles(name, null);
    }
}
